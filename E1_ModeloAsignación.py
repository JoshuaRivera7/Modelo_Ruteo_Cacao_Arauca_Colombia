# -*- coding: utf-8 -*-
"""1 Modelo Asignación.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ucxOJjOHUlGXsgQdNeYnK37i0UGqUxHU

# Modelo de Asignación

## Implementación
"""

!python -m pip install -i https://pypi.gurobi.com gurobipy
!pip install haversine

from haversine import haversine
from gurobipy import*
import pandas as pd

# Cargar Datos
coord_df = pd.read_excel('Coordenadas.xlsx', sheet_name = 'Hoja1')
produccion = pd.read_excel('Produccion.xlsx', sheet_name = 'Hoja1')
ejeX = list(coord_df['Longitud'])
ejeY = list(coord_df['Latitud'])
u = []
for j in range(len(ejeX)):
  u.append((ejeY[j], ejeX[j])) # Ubicación de cada finca

# Definir los conjuntos
n = 180 # Número de fincas
m = 2 # Número de plantas postcosecha
F = [i for i in range(n)] # Fincas
P = [j for j in range(m)] # Plantas

# Definir los parámetros
# Distancia entre cada finca y cada planta post cosecha (km)
centrosIniciales = [(7.019472, -71.384889), (6.6, -71.65)]
contFinca = 0
d = {}
for fincaAct in u:
  contCentro = 0
  for centro in centrosIniciales:
    # Vector con las distancias entre la finca actual y cada planta post cosecha
    d[(contFinca, contCentro)] = haversine(fincaAct, centro)
    contCentro += 1
  contFinca += 1


# Capacidad de procesamiento de cada planta (ton)
c = [1300, 600]

# Producción de cada finca (ton)
p = list(produccion['Producción'])

# Crear el modelo
modeloAsignacion = Model('Asignación')

# Crear las variables de decisión
x = modeloAsignacion.addVars(F, P, vtype = GRB.BINARY)

# Restricciones del Problema
# La producción de las fincas no puede superar la capacidad de las plantas
for j in P:
  modeloAsignacion.addConstr(quicksum(x[i, j] * p[i] for i in F) <= c[j])
# Cada finca sólo puede ser asignada a una única planta
for i in F:
  modeloAsignacion.addConstr(quicksum(x[i, j] for j in P) == 1)

# Función Objetivo
modeloAsignacion.setObjective(quicksum(x[i, j] * d[i, j] for i in F for j in P), GRB.MINIMIZE)

# Resolver
modeloAsignacion.optimize()
print('\n')

"""## Resultados"""

import matplotlib.pyplot as plt

# Imprimir y graficar los resultados
print(f'Función Objetivo: {modeloAsignacion.getObjective().getValue()}')
print('\n')
for j in P:  
  cP = 0
  for i in F:
    if x[i, j].x == 1:
      cP += 1
  print(f'Total Fincas Planta {j+1} = {cP}')
  print('\n')  


f = plt.figure()
f.set_figwidth(10)
f.set_figheight(10)

colores = ('green', 'orange')
for j in P:
  for i in F:
    if x[i, j].x == 1:
      plt.scatter(u[i][1], u[i][0], color = colores[j], marker = ".", s = 50)

plt.xlabel('Longitud', fontsize = 15)
plt.ylabel('Latitud', fontsize = 15)
plt.title('Ubicación de fincas asignadas a cada planta', fontsize = 20)
plt.show()